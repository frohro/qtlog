/* *******************************************************************
   QtLog copyright  : (C) 2000 by Dieter Kumpies DL1HBD
   email            :  diek@mycall.de
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the free Software Foundation; either version 2 of the License, or
   any later version.
   V 1.5.n : 06.05.2009
********************************************************************** */

#include <QtGui>
#include <QtSql>
#include "qsl.h"
#include "../qtlogDiag/dirmngr.h"
#include "../qtlogDiag/version.h"
extern DirMngr dirMngr;



void qsl::mkEqslUploadAdi()
{
    QString p, dfeld;
    QString Call, Cept, val, v, id, prFlg;
    int idx, er, qslrflg;
    er = 0;
    Err = 0;
    qslrflg = 0;
    path =  QDir::homePath();                      
    path += "/eQsl";
    QDir dir(path);                                
    QDate d = QDate::currentDate();                
    sentDay = d.toString("yyyy-MM-dd"); 
    p = sentDay;
    p.remove(QChar('-'), Qt::CaseInsensitive);
    p.remove(0, 2);
    s = path;
    s += "/"+settings.value("Call").toString()+"-"+p+".adi"; 
    path = s;
    QFile adiFile(s);
    if (!adiFile.open(QIODevice::Append | QIODevice::Text)) {  
         qDebug() << "ERROR " << s;                            
       return;
    }
    adiFile.resize(0);                                         
    QTextStream out(&adiFile);
    
    n = 0;
    QSqlQuery query;                                           
    qy = "SELECT id,cept,rufz,day,btime,band,mode,rstr,rsts,eqslr,eqslrd,qslSvia,ktext";
    qy += " FROM "+logFile+"om LEFT JOIN ("+logFile+"qsl,"+logFile+") ON (omid=oid AND qsoid=id)";
    qy += " WHERE ";

    qy += "(eqsls='' OR eqsls='R')";
    if(checkBoxZeitraum->isChecked() == TRUE) { 
       qy += " AND day BETWEEN '";              
       QDate d = dateEditLast->date();          //
       s = d.toString("yyyy-MM-dd");            
       qy += s;                                 //
       qy += "' AND ";                          
       d = dateEditHeute->date();               
       s = d.toString("yyyy-MM-dd");            //
       last = s;                                //
       qy += "'"+last+"'";                      //
    }
    qy += " ORDER BY day DESC";            
    
    query.exec(qy);
    n = query.size();                     
    if( !n ) {                            
       adiFile.close();
       QMessageBox::information( this,tr("eQSL Upload"),tr("\nDie Tabelle ist leer !.\n"),
       QMessageBox::Ok);
       return;
    }
    
    col = query.record().count();         
    adi.createTranslatTable();            
    adi.setModeTabel();
    s = VERSION;                          
    p = "*ADIF V2.0 - Import for eQSL.cc - Generated by QtLog "+s+"* LOG: "+logFile+" - at "+sentDay+"\n";
    l = l.setNum(n);
    i = l.count();
    p += "<APP_NUMERIC:"+l.setNum(i)+">"+s.setNum(n)+"\n";
    s = settings.value("Call").toString();
    i = s.length();
    p += "<EQSL_USER:"+l.setNum(i)+">"+s+"\n";
    s = settings.value("EqslPasswd").toString();
    i = s.length();
    p += "<EQSL_PSWD:"+l.setNum(i)+">"+s+"\n"; 
    p += "<ADIF_Ver:1>2\n";
    p += "<eoh>\n";
    out << p;

    while(query.next()) {
      qslrflg = 0;
      idx = 0;
      p = "";
      while(idx != col) {
       dfeld = query.record().fieldName(idx);      
       val = query.value(idx).toString();          
       if(dfeld.compare("id") == 0) {              
          id = val;
       }
       else 
       if(dfeld.compare("cept") == 0) {           
          Cept = val;
       }
       else
       if(dfeld.compare("rufz") == 0) {           
          Call = val;                             
          if(Cept.count() != 0) {                 
             val = Cept+Call;
             p += "<CALL:"+v.setNum(val.count())+">"+val; 
          }
          else
           p += "<CALL:"+v.setNum(Call.count())+">"+Call; 
       }
//
       else
       if(dfeld.compare("day") == 0) {             
         val.remove(QChar('-'), Qt::CaseInsensitive);
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+":d>"+val;
       }
       else
       if(dfeld.compare("btime") == 0) {           
         val.remove(QChar(':'), Qt::CaseInsensitive);
         val = val.left(4);
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("band") == 0) {
         val = adi.getAdifBand(val);               
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("mode") == 0) {
         s = adi.getAdifMode(val);                
         if(s.count() != 0) 
            p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+s;
         else {
           Error += "\n "+id+" : QSO < "+Call+" > Betriebsart = "+val+" unbekannt";
           toError.insert(id,Call);    
           er = 1;
           Err++;
         }
       }
       else
       if(dfeld.compare("rstr") == 0)              
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       else
       if(dfeld.compare("rsts") == 0)              
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       else
       if(dfeld.compare("eqslr") == 0) {           
          if(val.compare("Y") == 0)
           qslrflg = 1;                            
          else
           val = "N";                              
           p += " <QSL_RCVD:"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("eqslrd") == 0) {         
         if(qslrflg) {                            
           val.remove(QChar('-'), Qt::CaseInsensitive); 
           p += " <QSLRDATE:"+v.setNum(val.count())+":d>"+val;
         }
       }
       else
       if(dfeld.compare("qslSvia") == 0)
          p += " <QSL_SENT_VIA:1>E";
       else
       if(dfeld.compare("ktext") == 0) {          
         if(val.count() != 0) 
           p += " <QSLMSG:"+v.setNum(val.count())+">"+val;
       }

       else {
        if(val.count() != 0)                     
          p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       }
       idx++;
     }                        
     s = "SELECT cqz,adif FROM tla WHERE ldxcc='DL'";
     QSqlQuery query;
     query.exec(s);
     query.next();
       n = 0;
       val = query.value(n++).toString();
       p += " <"+adi.getAdifName("cqz")+":"+v.setNum(val.count())+">"+val;  
       val = query.value(n++).toString();
       p += " <"+adi.getAdifName("dxcc")+":"+v.setNum(val.count())+">"+val; 
       val = settings.value("Locator").toString();
       p += " <GRIDSQUARE:"+v.setNum(val.count())+">"+val;                  
       val = settings.value("Name").toString();
       p += " <NAME:"+v.setNum(val.count())+">"+val;                        
     p += "<EOR>\n";
     if( !er ) 
       out << p;                           
     else {                                
       er = 0;                             
     }
   }                                       
   out << "<EOF>\n";
   adiFile.close();
   adi.clearModeTable();
   adi.clearTranslateTable();
}



void qsl::mkLotwUploadAdi(int dataset)
{
    QString p, dfeld;
    QString Call, Cept, val, v, id, prFlg;
    int idx, er, qslrflg;
    er = 0;
    Err = 0;
    qslrflg = 0;
    adi.createTranslatTable();                     
    adi.setModeTabel();
    path =  QDir::homePath();                      
    path += "/lotw";
    QDir dir(path);                                
    if( !dir.exists() ) {                          
       dir.mkdir(path);                            
       s = path;
       s += "/tmp";
       dir.mkdir(s);                               
    }
    s = "mv "+path+"/*.adi "+path+"/tmp";          
    StartProcess(s.toAscii());
    s = "mv "+path+"/*.tq8 "+path+"/tmp";          
    StartProcess(s.toAscii());
    QDate d = QDate::currentDate();                
    sentDay = d.toString("yyyy-MM-dd"); 
    
    d = dateEditHeute->date();                     
    last = d.toString("yyyy-MM-dd"); 
                                                   
    val = last;                                                
    val.remove(QChar('-'), Qt::CaseInsensitive);               
    val = val.mid(2);                                          
    s = path;
    s += "/"+settings.value("Call").toString()+"_"+val+".adi"; 
    path = s;
    QFile adiFile(s);
    if (!adiFile.open(QIODevice::Append | QIODevice::Text)) {  
         qDebug() << "ERROR " << s;                            
       return;
    }
    adiFile.resize(0);                                         
    QTextStream out(&adiFile);
    n = 0;
    QSqlQuery query;                                           
    qy = "SELECT id,cept,rufz,band,mode,day,btime,lotqslr,lotqslrd,lotqsls,lotqslsd";
    qy += " FROM "+logFile+"om LEFT JOIN ("+logFile+"qsl,"+logFile+") ON (omid=oid AND qsoid=id)";
    qy += " WHERE ";

    if(checkBoxZeitraum->isChecked() == TRUE) { 
       qy += "lotqsls = 'R'";                   
       qy += " AND day BETWEEN '";
       QDate d = dateEditLast->date();
       s = d.toString("yyyy-MM-dd");            
       qy += s;
       qy += "' AND ";
       d = dateEditHeute->date();               
       s = d.toString("yyyy-MM-dd");
       last = s;
       qy += "'"+last;
       qy += "' ORDER BY day DESC";
    }
    else 
      qy += "lotqsls = 'R' ORDER BY day DESC";  
    query.exec(qy);
    n = query.size();                     
    col = query.record().count();         
    s = VERSION;                          
    p = "*ADIF V2.0 - Importfile for LoTW - Generated by QtLog "+s+" * LOG: "+logFile+" - at "+sentDay+"\n";
    s = settings.value("Call").toString();
    i = s.length();
    p += " <OWNER_CALLSIGN:"+l.setNum(i)+">"+s+"\n";
    p += " <STATION_CALLSIGN:"+l.setNum(i)+">"+s+"\n";
    l = l.setNum(n);
    i = l.count();
    p += " <APP_LotW_NUMERIC:"+l.setNum(i)+">"+s.setNum(n)+"\n";
    p += "<eoh>\n";
    out << p;

    while(query.next()) {
      qslrflg = 0;
      idx = 0;
      p = "";
      while(idx != col) {
       dfeld = query.record().fieldName(idx);      
       val = query.value(idx).toString();          
       if(dfeld.compare("id") == 0) {              
          id = val;
       }
       else 
       if(dfeld.compare("cept") == 0) {           
          Cept = val;
       }
       else
       if(dfeld.compare("rufz") == 0) {           
          Call = val;                             
          if(Cept.count() != 0) {                 
             val = Cept+Call;
             p += "<CALL:"+v.setNum(val.count())+">"+val; 
          }
          else
           p += "<CALL:"+v.setNum(Call.count())+">"+Call; 
       }
       else
       if(dfeld.compare("day") == 0) {             
         val.remove(QChar('-'), Qt::CaseInsensitive);
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+":d>"+val;
       }

       else
       if(dfeld.compare("lotqslr") == 0) {         
          if(val.compare("Y") == 0)
           qslrflg = 1;                            
          else
           val = "R";                              
           p += " <QSL_RCVD:"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("lotqslrd") == 0) {        
         if(qslrflg) {                             
           val.remove(QChar('-'), Qt::CaseInsensitive); 
           p += " <QSLRDATE:"+v.setNum(val.count())+":d>"+val;
         }
       }

       else
       if(dfeld.compare("lotqsls") == 0) {          
         val = "Y";                                 
         p += " <QSL_SENT:"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("lotqslsd") == 0) {         
         val = sentDay;
         val.remove(QChar('-'), Qt::CaseInsensitive); 
         p += " <QSLSDATE:"+v.setNum(val.count())+":d>"+val;
       }

       else
       if(dfeld.compare("btime") == 0) {         
         val.remove(QChar(':'), Qt::CaseInsensitive);
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("band") == 0) {
         val = adi.getAdifBand(val);             
         p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       }
       else
       if(dfeld.compare("mode") == 0) {
         s = adi.getAdifMode(val);               
         if(s.count() != 0) 
            p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+s;
         else {
           Error += "\n "+id+" : QSO < "+Call+" > Betriebsart = "+val+" unbekannt";
           toError.insert(id,Call);    
           er = 1;
           Err++;
         }
       }
       else {
        if(val.count() != 0)                     
          p += " <"+adi.getAdifName(dfeld)+":"+v.setNum(val.count())+">"+val;
       }
       idx++;
     }                       //while ein default_Datensatz noch nicht fertig
     if( dataset ) {                             
       s = "SELECT ituz,cqz,adif FROM tla WHERE ldxcc='DL'";
       QSqlQuery query;
       query.exec(s);
       while(query.next()) {
         n = 0;
         val = query.value(n++).toString();
         p += " <"+adi.getAdifName("ituz")+":"+v.setNum(val.count())+">"+val; 
         val = query.value(n++).toString();
         p += " <"+adi.getAdifName("cqz")+":"+v.setNum(val.count())+">"+val;  
         val = query.value(n++).toString();
         p += " <"+adi.getAdifName("dxcc")+":"+v.setNum(val.count())+">"+val; 
         val = settings.value("Locator").toString();
         p += " <GRIDSQUARE:"+v.setNum(val.count())+">"+val;                  
         val = settings.value("Name").toString();
         p += " <NAME:"+v.setNum(val.count())+">"+val;                        
         val = settings.value("Qth").toString();
         p += " <QTH:"+v.setNum(val.count())+">"+val;                         
       }
     }
     p += "<eor>\n";
     if( !er ) 
       out << p;                           
     else {                                
       er = 0;                             
     }
   }                                       
   out << "<EOF>\n";
   adiFile.close();
   adi.clearModeTable();
   adi.clearTranslateTable();
}
